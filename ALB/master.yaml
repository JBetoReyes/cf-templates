AWSTemplateFormatVersion: '2010-09-09'
Description: Application LoadBalancer

Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  BastionHostType:
    Description: Bastion EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small. t2.medium]
  ApplicationServerInstanceType:
    Description: Server EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small]
  AvailabilityZone1:
    Description: First availability zone
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
  AvailabilityZone2:
    Description: Second availability zone
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone
  KeyName:
    Description: PEM file Name
    Type: String
    ConstraintDescription: Must be a string

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.20.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicTableRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  SubnetPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  SubnetPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  AppServerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for a instance which client application is running
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  
  AppServerInstance1:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Installs apache
      AWS::CloudFormation::Init:
        configSets:
          UpdateAndInstall:
            - Update
            - Install
        Update:
          commands:
            update01:
              command: sudo yum update -y
        Install:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: '<h1>Congratulations Beto working!, you have successfully launched the AWS CloudFormation sample.</h1>'
              mode: 000644
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ',stack=, !Ref 'AWS::StackId', '

                    ',region=, !Ref 'AWS::Region',
                    "\n",'interval=1', 
                    "\n"
                    ]]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.AppServerInstance1.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
                  ' --resource AppServerInstance1', ' --region ', !Ref 'AWS::Region',
                  "\n", 'runas=root

                    ']]
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      SubnetId: !Ref PublicSubnet1
      ImageId: !Ref LatestAmiId
      SecurityGroupIds: 
      - !Ref AppServerInstanceSecurityGroup
      KeyName: !Ref KeyName
      InstanceType: !Ref ApplicationServerInstanceType
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -x',
          "\n", 'yum update -y aws-cfn-bootstrap',
          "\n", '/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource AppServerInstance1 ', ' --region ', !Ref 'AWS::Region',
          ' --configsets UpdateAndInstall ',
          "\n", '/opt/aws/bin/cfn-signal -e $? ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource AppServerInstance1 ', ' --region ', !Ref 'AWS::Region',
          "\n", 'echo "Hello World from $(hostname -f)" >> /var/www/html/index.html'
          ]

  AppServerInstance2:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Installs apache
      AWS::CloudFormation::Init:
        configSets:
          UpdateAndInstall:
            - Update
            - Install
        Update:
          commands:
            update01: sudo yum update -y
        Install:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: '<h1>Congratulations Beto working!, you have successfully launched the AWS CloudFormation sample.</h1>'
              mode: 000644
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ',stack=, !Ref 'AWS::StackId', '

                    ',region=, !Ref 'AWS::Region',
                    "\n",'interval=1', 
                    "\n"
                    ]]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.AppServerInstance2.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
                  ' --resource AppServerInstance2', ' --region ', !Ref 'AWS::Region',
                  "\n", 'runas=root

                    ']]
              mode: '000400'
              owner: root
              group: root           
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true' 
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      SubnetId: !Ref PublicSubnet2
      AvailabilityZone: !Ref AvailabilityZone2
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      SecurityGroupIds: 
      - !Ref AppServerInstanceSecurityGroup
      InstanceType: !Ref ApplicationServerInstanceType
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -x',
          "\n", 'yum update -y aws-cfn-bootstrap',
          "\n", '/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource AppServerInstance2 ', ' --region ', !Ref 'AWS::Region',
          ' --configsets UpdateAndInstall ',
          "\n", '/opt/aws/bin/cfn-signal -e $? ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource AppServerInstance2 ', ' --region ', !Ref 'AWS::Region',
          "\n", 'echo "Hello World from $(hostname -f)" >> /var/www/html/index.html'
          ]
  
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Internet facing LoadBalancer security group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
  
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 50
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  
  HTTP80Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppServerTargetGroup
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
  
  AppServerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref AppServerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn: !Ref HTTP80Listener
      Priority: 1

  AppServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: AppServerTargetGroup
      TargetType: instance
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 4
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      VpcId: !Ref VPC
      Targets:
        - Id: !Ref AppServerInstance1
          Port: 80
        - Id: !Ref AppServerInstance2
          Port: 80

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for a bastion host. only port 22 is allowed
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1
      InstanceType: !Ref BastionHostType
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          DeleteOnTermination: true
          GroupSet:
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.30.0/24
      AvailabilityZone: !Ref AvailabilityZone1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.40.0/24
      AvailabilityZone: !Ref AvailabilityZone2

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  NATGateway:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  
  SubnetPrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  SubnetPrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  


