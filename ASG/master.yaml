AWSTemplateFormatVersion: 2010-09-09
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  AvailabilityZone1:
    Description: Availability zone for public subnet
    Type: String

  AvailabilityZone2:
    Description: Availability zone for private subnet

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  
  BastionInstanceType:
    Description: Type of Environment
    Type: String
    Default: t2.micro
    AllowValues:
      - t2.micro
      - t2.nano
      - t2.small
      - t2.large

  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.nano
    - t2.medium
    - t2.large
  
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
      CidrBlock: 10.10.10.0/24
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 10.10.20.0/24
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewaidId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  
  NATGatewayId:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.30.0/24
      AvailabilityZone: !Ref AvailabilityZone1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone2
      CidrBlock: 10.10.40.0/24

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PrivateRouteToNAT:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGatewayId
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateSubnet1
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PrivateSubnet2
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Instance Security Group
      GroupName: BastionSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        Description: SSH
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  BastionInstance:
    Type: AWS::EC2::Instance
    DependsOn: BastionSecurityGroup
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref BastionInstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: "0"
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1
        GroupSet:
        - !Ref BastionSecurityGroup

  ALBSecurityGroup:
    Type: AWS::EC2::SecurtiyGroup
    Properties:
      GroupDescription: Internet facing load balancer security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: ALBSecurityGroup
    Properties:
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Scheme: internet-facing
      SecurityGroups:
      - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 50
  
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 20
  
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - !Ref ALBTargetGroup
      - !Ref ALB
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  AppServerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for an instance which the client app is running
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          UpdateAndInstall:
          - Update
          - Install
        Update:
          commands:
            update01: sudo yum update -y
        Install:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: '<h1>Congratulations Beto working!, you have successfully launched the AWS CloudFormation sample.</h1>'
              mode: '000666'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ',stack=, !Ref 'AWS::StackId', '

                    ',region=, !Ref 'AWS::Region',
                    "\n",'interval=1', 
                    "\n"
                    ]]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.AppServerInstance1.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
                  ' --resource AppServerInstance1', ' --region ', !Ref 'AWS::Region',
                  "\n", 'runas=root

                    ']]
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      SecurityGroups:
      - !Ref AppServerInstanceSecurityGroup
      InstanceType: !Ref InstanceType
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -x',
          "\n", 'yum update -y aws-cfn-bootstrap',
          "\n", '/opt/aws/bin/cfn-init -v ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource LaunchConfig ', ' --region ', !Ref 'AWS::Region',
          ' --configsets UpdateAndInstall ',
          "\n", '/opt/aws/bin/cfn-signal -e $? ', ' --stack ', !Ref 'AWS::StackName',
          ' --resource LaunchConfig ', ' --region ', !Ref 'AWS::Region',
          "\n", 'echo "Hello World from $(hostname -f)" >> /var/www/html/index.html'      
          ]

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ALBTargetGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 1
      MaxSize: 3
      TargetGroupsARNs:
      - !Ref ALBTargetGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 1
          MaxBatchSize: 1
          PauseTime: PT10M
          WaitOnResourceSignals: true
