AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template EC2InstanceWithSecurityGroupSample:
  Create an Amazon EC2 instance running the Amazon Linux AMI. The AMI is chosen based
  on the region in which the stack is run. This example creates an EC2 security group
  for the instance to give you SSH access. **WARNING** This template creates an Amazon
  EC2 instance. You will be billed for the AWS resources used if you create a stack
  from this template.'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.44.0.0/16
    Public:
      CIDR: 10.44.0.0/24
    Private:
      CIDR: 10.44.1.0/24
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: project
        Value: devassoc

  PublicSubnet:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
        - Key: project
          Value: devassoc

  PrivateSubnet:
    DependsOn:
    - VPC
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Private
        - CIDR
      Tags:
      - Key: project
        Value: devassoc

  PublicEC2Instance:
    DependsOn:
    - InstanceSecurityGroup
    - PublicSubnet
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      NetworkInterfaces:
      - GroupSet:
        - Ref: InstanceSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: PublicSubnet
      KeyName: !Ref 'KeyName'
      ImageId: ami-0742b4e673072066f
      IamInstanceProfile: !Ref PrivateInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash\n"
            - exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1 
            - yum update -y && yum install httpd -y && service httpd start && chkconfig
              httpd on
            - systemctl start httpd.service
            - systemctl enable httpd.service
            - "echo \"Hello world from $(hostname -f)\" > /var/www/html/index.html"
      Tags:
      - Key: project
        Value: devassoc
  
  PrivateEC2Instance:
    DependsOn:
    - VPC
    - PrivateInstanceProfile
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref PrivateInstanceProfile
      NetworkInterfaces:
      - GroupSet:
        - Ref: InstanceSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId: !Ref PrivateSubnet
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash\r\n\r\n# Install Apache Web Server \r\nyum install httpd
              -y\r\nservice httpd start\r\nchkconfig httpd on\r\n\r\n# Discovery configuration
              from using the EC2 metadata service\r\nID=$(curl 169.254.169.254/latest/meta-data/instance-id)\r\nTYPE=$(curl
              169.254.169.254/latest/meta-data/instance-type)\r\nAZ=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone)\r\nIPV4=$(curl
              -f 169.254.169.254/latest/meta-data/public-ipv4)\r\n\r\n# Set up the
              Web Site\r\ncd /var/www/html\r\n\r\n## Make AWS Cloud API calls to generate
              an audio file\r\nVOICE=$(aws polly describe-voices --language-code en-US
              \ \\\r\n--region us-east-1 --query Voices[0].Id --output text)\r\naws
              polly synthesize-speech --region us-east-1 --voice-id $VOICE \\\r\n--text
              \"Hello from EC2 instance $ID.\" --output-format mp3 instance.mp3\r\n\r\n##
              Generate customized index.html for this instance\r\necho \"<html><body><H1>Welcome
              to your EC2 Instance</H1><p><p>\" > ./index.html\r\necho \"<audio controls>\"
              >> ./index.html\r\necho '<source src=\"instance.mp3\" type=\"audio/mp3\">'
              >> ./index.html\r\necho 'Here is an <a href=\"instance.mp3\"> audio
              greeting.</a> ' >> ./index.html\r\necho \"</audio><p><p>\" >> ./index.html\r\necho
              \"There are many other instances, but\" >> ./index.html\r\necho \"<strong>$ID</strong>
              is yours.<p><p>\" >> ./index.html\r\necho \"This is a <strong>$TYPE</strong>
              instance\" >> ./index.html\r\necho \" in <strong>$AZ</strong>. <p><p>\"
              >> ./index.html\r\nif [ \"$IPV4\" ]; \r\nthen\r\n    echo \"The public
              ip is <strong>$IPV4</strong>.<p><p>\"  >> ./index.html\r\nelse\r\n    echo
              \"This instance does <strong>NOT</strong> have\" >> ./index.html\r\n
              \   echo \"a public ip address.<p><p>\"  >> ./index.html\r\nfi\r\necho
              \"--Audio provided by the $VOICE voice.<p><p>\" >> ./index.html\r\necho
              \"</body></html>\" >> ./index.html"

  NatInstance:
    DependsOn:
    - VPC
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SourceDestCheck: false
      ImageId: ami-184dc970
      NetworkInterfaces:
      - GroupSet:
        - Ref: NatSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet
      Tags:
        - Key: project
          Value: devassoc
      
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'SSHLocation'
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0

  NatSecurityGroup:
    DependsOn:
    - VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NAT Security Group
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: project
        Value: devassoc

  NatSecurityGroupIngress1:
    DependsOn:
    - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
  
  NatSecurityGroupIngress2:
    DependsOn:
    - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref InstanceSecurityGroup

  NatSecurityGroupIngress3:
    DependsOn:
    - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref InstanceSecurityGroup

  PublicInternetGateway:
    Type: AWS::EC2::InternetGateway

  PublicInternetGatewayAttachment:
    DependsOn:
    - VPC
    - PublicInternetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: PublicInternetGateway

  PublicRouteTable:
    DependsOn:
    - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: project
          Value: devassoc
  
  PublicTableRoute:
    DependsOn:
    - PublicRouteTable
    - PublicInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: PublicInternetGateway

  PublicSubnetRouteTableAssociation:
    DependsOn:
    - PublicSubnet
    - PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  PrivateRouteTable:
    DependsOn:
    - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PrivateRoute:
    DependsOn:
    - VPC
    - PrivateRouteTable
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance

  PrivateSubnetRouteTableAssociation:
    DependsOn:
    - PrivateSubnet
    - PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet
      RouteTableId:
        Ref: PrivateRouteTable

  PollyReadOnlyAccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/TranslateReadOnly
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"

  PollyReadOnlyAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: PollyReadOnlyAccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - polly:DescribeVoices
          - polly:GetLexicon
          - polly:GetSpeechSynthesisTask
          - polly:ListLexicons
          - polly:ListSpeechSynthesisTasks
          - polly:SynthesizeSpeech
          Resource: "*"
      Roles:
      - Ref: PollyReadOnlyAccessRole

  PrivateInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: PollyReadOnlyAccessRole
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'PublicEC2Instance'
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt [PublicEC2Instance, AvailabilityZone]
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt [PublicEC2Instance, PublicDnsName]
  PublicIP:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt [PublicEC2Instance, PublicIp]