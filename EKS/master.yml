AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public01:
      CIDR: 10.0.0.0/24
    Public02:
      CIDR: 10.0.1.0/24
  
  ServicePrincipals:
    aws-cn:
      ec2: ec2.amazonaws.com.cn
    aws-us-gov:
      ec2: ec2.amazonaws.com
    aws:
      ec2: ec2.amazonaws.com

  AvailabilityZones:
    Public01:
     zone: us-east-1a
    Public02: 
      zone: us-east-1b

Resources:
  EKSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EKSVPC
  
  EKSRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EKSVPC
  
  EKSPublicRoute:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EKSRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  EKSPublicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::FindInMap:
        - AvailabilityZones
        - Public01
        - zone
      MapPublicIpOnLaunch: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public01
        - CIDR
      VpcId: !Ref EKSVPC

  EKSPublicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::FindInMap:
        - AvailabilityZones
        - Public02
        - zone
      MapPublicIpOnLaunch: true
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public02
        - CIDR
      VpcId: !Ref EKSVPC

  EKSPublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref EKSPublicSubnet01
      RouteTableId: !Ref EKSRouteTable

  EKSPublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref EKSPublicSubnet02
      RouteTableId: !Ref EKSRouteTable

  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref EKSVPC
  
  EKSIAMRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                - eks.amazonaws.com
              Action:
              - 'sts:AssumeRole'
        RoleName: EKSIAMRoleName
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: EKS
      Version: 1.18
      RoleArn:
        Fn::GetAtt: [ EKSIAMRole, Arn ]
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
        SubnetIds:
          - !Ref EKSPublicSubnet01
          - !Ref EKSPublicSubnet02
    DependsOn: [EKSIAMRole, EKSPublicSubnet01, EKSPublicSubnet02, EKSSecurityGroup]

  EKSNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !FindInMap [ServicePrincipals, !Ref "AWS::Partition", ec2]
            Action:
                - "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKSWorkerNodePolicy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      Path: /

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: EKS
      NodeRole:
        Fn::GetAtt: [EKSNodeInstanceRole, Arn]
      InstanceTypes:
        - t2.micro
      NodegroupName: NodeGroup01
      RemoteAccess:
        Ec2SshKey: devassoc
      ScalingConfig:
        MinSize: 1
        DesiredSize: 2
        MaxSize: 7
      Labels:
        Project: aws-eks
      Subnets:
        - !Ref EKSPublicSubnet01
        - !Ref EKSPublicSubnet02
    DependsOn: [EKSCluster, EKSNodeInstanceRole]
