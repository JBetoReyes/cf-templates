AWSTemplateFormatVersion: '2010-09-09'
Description: RDS Application

Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]
  
  AvailabilityZone1:
    Description: First availability zone
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  AvailabilityZone2:
    Description: Second availability zone
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: Must be a valid availability zone

  KeyName:
    Description: PEM file name
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair
  
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  
  DBName:
    Description: Database name
    Type: String
  
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.

  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'

  DBAllocatedStorage:
    Default: '10'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: Must be between 5 and 1024Gb.

  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: Must select a valid database instance type.
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.10.10.0/24
      VpcId: !Ref VPC
      AvailabilityZone: !Ref AvailabilityZone1
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.20.0/24
      AvailabilityZone: !Ref AvailabilityZone1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.10.30.0/24
      AvailabilityZone: !Ref AvailabilityZone2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  AppInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
      - FromPort: 3200
        ToPort: 3200
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      - FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
        IpProtocol: tcp
      - FromPort: 22
        ToPort: 22
        IpProtocol: tcp
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  
  AppInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Installs Node App
      AWS::CloudFormation::Init:
        configSets:
          Install:
          - InstallNode
          - InstallGit
          - PullAppRepo
          - StartApp
        InstallNode:
          commands:
            install01:
              command: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | sudo -u ec2-user bash
            install02:
              command: echo ". /home/ec2-user/.nvm/nvm.sh" | sudo -u ec2-user bash
            install03:
              command: echo "(source $HOME/.bashrc && nvm install node) 2> >(tee -a /home/ec2-user/error.log)" | sudo -u ec2-user bash
              env:
                HOME: "/home/ec2-user"
        InstallGit:
          packages:
            yum:
              git: []
        PullAppRepo:
          commands:
            command01:
              command: echo "git clone https://github.com/JBetoReyes/cf-node-apps.git" | sudo -u ec2-user bash
              cwd: "/home/ec2-user"
              ignoreErrors: true
            command02:
              command: mv ./cf-node-apps/rds ./app 2> errormkdir.txt
              cwd: "/home/ec2-user"
              ignoreErrors: true
            command03:
              command: echo "(source $HOME/.bashrc && npm install)" | sudo -u ec2-user bash 2> installerr.txt
              cwd: "/home/ec2-user/app"
              env:
                HOME: "/home/ec2-user"
        StartApp:
          files:
            /home/ec2-user/app/set_env_vars.sh:
              content: |
                #!/bin/bash
                region=$(curl http://169.254.169.254/latest/meta-data/placement/region)
                envvar=( RDSEndpoint RDSPort RDSDBName RDSDBUser RDSDBPassword )
                appvars=( POSTGRES_HOST RDSPort POSTGRES_DB POSTGRES_USER POSTGRES_PASSWORD )
                for i in "${!envvar[@]}"
                do
                  value=$(aws ssm get-parameters --names ${envvar[$i]} --region $region --query "Parameters[0].Value" | sed 's/"//g')
                  key=${appvars[$i]}
                  new_var=$key="$value"
                  echo $new_var
                  export $new_var
                done
                export APP_PORT=3200
              mode: "000744"
              owner: ec2-user
              group: ec2-user
          commands:
            start01:
              command: "source set_env_vars.sh && npm start &"
              cwd: "/home/ec2-user/app"


    DependsOn:
    - AppInstanceSecurityGroup
    - PublicSubnet1
    Properties:
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
      - GroupSet:       
        - Ref: AppInstanceSecurityGroup
        AssociatePublicIpAddress: true
        DeviceIndex: 0
        DeleteOnTermination: true
        SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref AppInstanceProfile
      UserData: !Base64
        Fn::Join:
        - ''
        - [
          '#!/bin/bash -x',
          "\n", "yum update -y",
          "\n", 'yum update -y aws-cfn-bootstrap',
          "\n", '/opt/aws/bin/cfn-init -v ',
            ' --stack ', !Ref 'AWS::StackName',
            ' --resource AppInstance ',
            ' --region ', !Ref 'AWS::Region',
            ' --configsets Install ',
          "\n", '/opt/aws/bin/cfn-signal -e $?',
            ' --stack ', !Ref 'AWS::StackName',
            ' --resource AppServerInstance1 ',
            ' --region ', !Ref 'AWS::Region'
          ]
  
  RDSSecurityGroup:
    DependsOn:
    - VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Instance Security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppInstanceSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Instance Subnet Group
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
  
  AWSRDSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: /

  AWSRDSPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: RDSPolicies
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: rds:DescribeDBInstances
          Resource: !Sub 'arn:aws:rds:*'
      Roles:
      - !Ref AWSRDSRole
  
  AWSSSMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SSMPolicies
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ssm:GetParameters
          Resource: 
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/RDSPort'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/RDSDBName'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/RDSDBUser'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/RDSDBPassword'
          - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/RDSEndpoint'
      Roles:
      - !Ref AWSRDSRole
  
  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: AWSRDSRole
  
  RDSInstance:
    DependsOn:
    - RDSSecurityGroup
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AvailabilityZone: !Ref AvailabilityZone1
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
      - !Ref RDSSecurityGroup
  
  RDSEndpointParameter:
    DependsOn: RDSInstance
    Type: AWS::SSM::Parameter
    Properties:
      Name: RDSEndpoint
      Type: String
      Value: !GetAtt RDSInstance.Endpoint.Address
  
  RDSPortParameter:
    DependsOn: RDSInstance
    Type: AWS::SSM::Parameter
    Properties:
      Name: RDSPort
      Type: String
      Value: !GetAtt RDSInstance.Endpoint.Port
  
  RDSDBNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RDSDBName
      Type: String
      Value: !Ref DBName
  
  RDSDBUserParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RDSDBUser
      Type: String
      Value: !Ref DBUser

  RDSDBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: RDSDBPassword
      Type: String
      Value: !Ref DBPassword